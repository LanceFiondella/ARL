 def genTable(self, index):
        layout = QVBoxLayout()
        gammas = np.linspace(0, self.arl.ba, num = self.arl.intermediate)
        resultTable = QTableWidget()
        resultTable.setColumnCount(len(self.arl.componentIndices) + 1)
        resultTable.setRowCount(len(gammas))
        for i, gamma in enumerate(gammas):
                g = QTableWidgetItem()
                g.setText(str(int(gamma)))
                resultTable.setItem(i, 0, g)
        if index == 0:
            labels = ['Investment in reliability']
            for i, idx in enumerate(self.arl.componentIndices):
                labels.append('Component {}'.format(idx))
                lifecycle_costs = self.arl.lc_cost[i]
                for j, cost in enumerate(lifecycle_costs):
                    c = QTableWidgetItem()
                    c.setText(str(cost))
                    resultTable.setItem(j, i+1, c)
            resultTable.setHorizontalHeaderLabels(labels)
        elif index ==1:
            labels = ['Investment in reliability']
            for i, idx in enumerate(self.arl.componentIndices):
                labels.append('Component {}'.format(idx))
                comp_avail = self.arl.comp_avail[i]
                for j, mu in enumerate(comp_avail):
                    c = QTableWidgetItem()
                    c.setText(str(mu))
                    resultTable.setItem(j, i+1, c)
            resultTable.setHorizontalHeaderLabels(labels)
        elif index == 2:
            labels = ['Investment in reliability']
            for i, idx in enumerate(self.arl.componentIndices):
                labels.append('Component {}'.format(idx))
                marg_util = self.arl.marg_util[i]
                for j, mu in enumerate(marg_util):
                    c = QTableWidgetItem()
                    c.setText(str(mu))
                    resultTable.setItem(j, i+1, c)
            resultTable.setHorizontalHeaderLabels(labels)
        elif index == 3:    
            labels = ['Investment in reliability', 'System Availability']
            sys_avail = self.arl.sys_avail_list
            for i, mu in enumerate(sys_avail):
                c = QTableWidgetItem()
                c.setText(str(mu))
                resultTable.setItem(i, 1, c)
            resultTable.setHorizontalHeaderLabels(labels)
        elif index == 4:
            labels = ['Investment in reliability', 'Fleet Size']
            fleet_size = self.arl.opt_fleet_size
            for i, mu in enumerate(fleet_size):
                c = QTableWidgetItem()
                c.setText(str(mu))
                resultTable.setItem(i, 1, c)
            resultTable.setHorizontalHeaderLabels(labels)
        elif index == 5:
            labels = ['System Availability', 'Fleet Size']
            sys_avail = self.arl.sys_avail_list
            fleet_size = self.arl.opt_fleet_size
            for i, mu in enumerate(fleet_size):
                c = QTableWidgetItem()
                c.setText(str(mu))
                resultTable.setItem(i, 1, c)
                d = QTableWidgetItem()
                d.setText(str(sys_avail[i]))
                resultTable.setItem(i, 0, d)
            resultTable.setHorizontalHeaderLabels(labels)
        layout.addWidget(resultTable)
        return layout
    
    def plotFig(self, index):
        gammas = np.linspace(0, self.arl.ba, num = self.arl.intermediate)
        #gammas = list(zip(*self.optimal_investment))
        #print(gammas)
        fig, ax1 = plt.subplots(1, 1)
        #ax1 = fig.add_subplot(111)
        
        plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,
           ncol=2, mode="expand", borderaxespad=0.)
        
        canvas = FigureCanvas(fig)
        toolbar = NavigationToolbar(canvas, self)
        
        
        if index == 0:
            self.arl.get_lc_costs(gammas)
            for i, idx in enumerate(self.arl.componentIndices):
                ax1.step(gammas, self.arl.lc_cost[i], label="Component {}".format(idx+1))
            ax1.set_xlabel("Investment in reliability $\gamma_i$")
            ax1.set_ylabel("Subsystem Lifecycle Cost ($C_i$)")
            ax1.set_title("Impact of investment in reliability improvement\n on subsystem lifecycle cost")
        elif index == 1:
            self.arl.get_comp_avail(gammas)
            for i, idx in enumerate(self.arl.componentIndices):
                ax1.step(gammas, self.arl.comp_avail[i], label="Component {}".format(idx+1))
            ax1.set_xlabel("Investment in reliability $\gamma_i$")
            ax1.set_ylabel("Availability")
            ax1.set_title("Impact of investment in reliability improvement\n on subsystem availability")
        elif index == 2:
            self.arl.get_marg_util(gammas)
            for i, idx in enumerate(self.arl.componentIndices):
                ax1.step(gammas, self.arl.marg_util[i], label="Component {}".format(idx+1))
            ax1.set_xlabel("Investment in reliability $\gamma_i$")
            ax1.set_ylabel("Fleet Size")
            ax1.set_title("Marginal utility of subsystem reliability investment\n on fleet size")
        elif index == 3:
            self.arl.get_sys_avail()
            plotline = self.arl.sys_avail_list
            ax1.step(gammas, plotline)
            ax1.set_xlabel("Investment in reliability $\gamma_i$")
            ax1.set_ylabel("System Availability")
            ax1.set_title("Impact of optimal investment in reliability\n improvement on system availability")
        elif index == 4:
            self.arl.get_fleet_size()
            plotline = self.arl.opt_fleet_size
            ax1.step(gammas, plotline)
            ax1.set_xlabel("Investment in reliability $\gamma_i$")
            ax1.set_ylabel("Fleet Size")
            ax1.set_title("Impact of optimal investment in reliability\n improvement on fleet size")
        elif index == 5:
            self.arl.get_sys_avail()
            self.arl.get_fleet_size()
            ax1.step(self.arl.sys_avail_list, self.arl.opt_fleet_size)
            ax1.set_xlabel("Fleet Size")
            ax1.set_ylabel("System Availability (A)")
            ax1.set_title("Optimal availability and fleet size for various investments")
        
        ax1.legend()
        canvas.draw()
        layoutfig = QVBoxLayout()
        layoutfig.addWidget(toolbar)
        layoutfig.addWidget(canvas, 1)
        plt.tight_layout()
        return layoutfig def genTable(self, index):
        layout = QVBoxLayout()
        gammas = np.linspace(0, self.arl.ba, num = self.arl.intermediate)
        resultTable = QTableWidget()
        resultTable.setColumnCount(len(self.arl.componentIndices) + 1)
        resultTable.setRowCount(len(gammas))
        for i, gamma in enumerate(gammas):
                g = QTableWidgetItem()
                g.setText(str(int(gamma)))
                resultTable.setItem(i, 0, g)
        if index == 0:
            labels = ['Investment in reliability']
            for i, idx in enumerate(self.arl.componentIndices):
                labels.append('Component {}'.format(idx))
                lifecycle_costs = self.arl.lc_cost[i]
                for j, cost in enumerate(lifecycle_costs):
                    c = QTableWidgetItem()
                    c.setText(str(cost))
                    resultTable.setItem(j, i+1, c)
            resultTable.setHorizontalHeaderLabels(labels)
        elif index ==1:
            labels = ['Investment in reliability']
            for i, idx in enumerate(self.arl.componentIndices):
                labels.append('Component {}'.format(idx))
                comp_avail = self.arl.comp_avail[i]
                for j, mu in enumerate(comp_avail):
                    c = QTableWidgetItem()
                    c.setText(str(mu))
                    resultTable.setItem(j, i+1, c)
            resultTable.setHorizontalHeaderLabels(labels)
        elif index == 2:
            labels = ['Investment in reliability']
            for i, idx in enumerate(self.arl.componentIndices):
                labels.append('Component {}'.format(idx))
                marg_util = self.arl.marg_util[i]
                for j, mu in enumerate(marg_util):
                    c = QTableWidgetItem()
                    c.setText(str(mu))
                    resultTable.setItem(j, i+1, c)
            resultTable.setHorizontalHeaderLabels(labels)
        elif index == 3:    
            labels = ['Investment in reliability', 'System Availability']
            sys_avail = self.arl.sys_avail_list
            for i, mu in enumerate(sys_avail):
                c = QTableWidgetItem()
                c.setText(str(mu))
                resultTable.setItem(i, 1, c)
            resultTable.setHorizontalHeaderLabels(labels)
        elif index == 4:
            labels = ['Investment in reliability', 'Fleet Size']
            fleet_size = self.arl.opt_fleet_size
            for i, mu in enumerate(fleet_size):
                c = QTableWidgetItem()
                c.setText(str(mu))
                resultTable.setItem(i, 1, c)
            resultTable.setHorizontalHeaderLabels(labels)
        elif index == 5:
            labels = ['System Availability', 'Fleet Size']
            sys_avail = self.arl.sys_avail_list
            fleet_size = self.arl.opt_fleet_size
            for i, mu in enumerate(fleet_size):
                c = QTableWidgetItem()
                c.setText(str(mu))
                resultTable.setItem(i, 1, c)
                d = QTableWidgetItem()
                d.setText(str(sys_avail[i]))
                resultTable.setItem(i, 0, d)
            resultTable.setHorizontalHeaderLabels(labels)
        layout.addWidget(resultTable)
        return layout
    
    def plotFig(self, index):
        gammas = np.linspace(0, self.arl.ba, num = self.arl.intermediate)
        #gammas = list(zip(*self.optimal_investment))
        #print(gammas)
        fig, ax1 = plt.subplots(1, 1)
        #ax1 = fig.add_subplot(111)
        
        plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,
           ncol=2, mode="expand", borderaxespad=0.)
        
        canvas = FigureCanvas(fig)
        toolbar = NavigationToolbar(canvas, self)
        
        
        if index == 0:
            self.arl.get_lc_costs(gammas)
            for i, idx in enumerate(self.arl.componentIndices):
                ax1.step(gammas, self.arl.lc_cost[i], label="Component {}".format(idx+1))
            ax1.set_xlabel("Investment in reliability $\gamma_i$")
            ax1.set_ylabel("Subsystem Lifecycle Cost ($C_i$)")
            ax1.set_title("Impact of investment in reliability improvement\n on subsystem lifecycle cost")
        elif index == 1:
            self.arl.get_comp_avail(gammas)
            for i, idx in enumerate(self.arl.componentIndices):
                ax1.step(gammas, self.arl.comp_avail[i], label="Component {}".format(idx+1))
            ax1.set_xlabel("Investment in reliability $\gamma_i$")
            ax1.set_ylabel("Availability")
            ax1.set_title("Impact of investment in reliability improvement\n on subsystem availability")
        elif index == 2:
            self.arl.get_marg_util(gammas)
            for i, idx in enumerate(self.arl.componentIndices):
                ax1.step(gammas, self.arl.marg_util[i], label="Component {}".format(idx+1))
            ax1.set_xlabel("Investment in reliability $\gamma_i$")
            ax1.set_ylabel("Fleet Size")
            ax1.set_title("Marginal utility of subsystem reliability investment\n on fleet size")
        elif index == 3:
            self.arl.get_sys_avail()
            plotline = self.arl.sys_avail_list
            ax1.step(gammas, plotline)
            ax1.set_xlabel("Investment in reliability $\gamma_i$")
            ax1.set_ylabel("System Availability")
            ax1.set_title("Impact of optimal investment in reliability\n improvement on system availability")
        elif index == 4:
            self.arl.get_fleet_size()
            plotline = self.arl.opt_fleet_size
            ax1.step(gammas, plotline)
            ax1.set_xlabel("Investment in reliability $\gamma_i$")
            ax1.set_ylabel("Fleet Size")
            ax1.set_title("Impact of optimal investment in reliability\n improvement on fleet size")
        elif index == 5:
            self.arl.get_sys_avail()
            self.arl.get_fleet_size()
            ax1.step(self.arl.sys_avail_list, self.arl.opt_fleet_size)
            ax1.set_xlabel("Fleet Size")
            ax1.set_ylabel("System Availability (A)")
            ax1.set_title("Optimal availability and fleet size for various investments")
        
        ax1.legend()
        canvas.draw()
        layoutfig = QVBoxLayout()
        layoutfig.addWidget(toolbar)
        layoutfig.addWidget(canvas, 1)
        plt.tight_layout()
        return layoutfig
        
        
        
    def generateXAxisBox(self):
        layout = QHBoxLayout()
        layout.addWidget(QLabel('Availability improvement budget limit'))
        self.baLimitTextBox = QLineEdit(str(self.arl.ba))
        self.recomputeButton = QPushButton('Recompute')
        self.recomputeButton.clicked.connect(self.recompute)
        layout.addWidget(self.baLimitTextBox)
        layout.addWidget(self.recomputeButton)
        return layout
        
        
        
    def recompute(self):
        self.arl.ba = int(self.baLimitTextBox.text())
        self.generateTabs(self.comboBox.currentIndex())
    
    def generateComboBox(self):
        self.comboBox = QComboBox()
        self.comboBox.addItem('Impact of investment')
        self.comboBox.addItem('Availability')
        self.comboBox.addItem('Marginal Utility of Subsystems')
        self.comboBox.addItem('System Availability')
        self.comboBox.addItem('Investment in reliability vs. Fleet size')
        self.comboBox.addItem('System availability vs. Fleet size')
        self.comboBox.currentIndexChanged.connect(self.generateTabs)
        #return comboBox
    
    
    def generateTabs(self, index):
        #print(index)
        self.tabs.clear()
        self.plotWidget = QWidget()
        self.tableWidget = QWidget()
        self.plotLayout = self.plotFig(index)
        self.plotWidget.setLayout(self.plotLayout)
               
        self.tableLayout = self.genTable(index)
        self.tableWidget.setLayout(self.tableLayout)
        
        self.tabs.addTab(self.plotWidget, 'Plot')
        self.tabs.addTab(self.tableWidget, 'Data Table')
        
        #return self.tabs